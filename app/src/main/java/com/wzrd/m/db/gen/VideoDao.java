package com.wzrd.m.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzrd.m.been.Video;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO".
*/
public class VideoDao extends AbstractDao<Video, String> {

    public static final String TABLENAME = "VIDEO";

    /**
     * Properties of entity Video.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Video_type = new Property(1, String.class, "video_type", false, "VIDEO_TYPE");
        public final static Property Video_path = new Property(2, String.class, "video_path", false, "VIDEO_PATH");
        public final static Property Face_pic_path = new Property(3, String.class, "face_pic_path", false, "FACE_PIC_PATH");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
    };


    public VideoDao(DaoConfig config) {
        super(config);
    }
    
    public VideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"VIDEO_TYPE\" TEXT," + // 1: video_type
                "\"VIDEO_PATH\" TEXT," + // 2: video_path
                "\"FACE_PIC_PATH\" TEXT," + // 3: face_pic_path
                "\"TITLE\" TEXT);"); // 4: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Video entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String video_type = entity.getVideo_type();
        if (video_type != null) {
            stmt.bindString(2, video_type);
        }
 
        String video_path = entity.getVideo_path();
        if (video_path != null) {
            stmt.bindString(3, video_path);
        }
 
        String face_pic_path = entity.getFace_pic_path();
        if (face_pic_path != null) {
            stmt.bindString(4, face_pic_path);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Video entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String video_type = entity.getVideo_type();
        if (video_type != null) {
            stmt.bindString(2, video_type);
        }
 
        String video_path = entity.getVideo_path();
        if (video_path != null) {
            stmt.bindString(3, video_path);
        }
 
        String face_pic_path = entity.getFace_pic_path();
        if (face_pic_path != null) {
            stmt.bindString(4, face_pic_path);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Video readEntity(Cursor cursor, int offset) {
        Video entity = new Video( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // video_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // video_path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // face_pic_path
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Video entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideo_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVideo_path(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFace_pic_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Video entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Video entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
