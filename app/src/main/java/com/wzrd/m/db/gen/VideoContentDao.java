package com.wzrd.m.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzrd.m.been.VideoContent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_CONTENT".
*/
public class VideoContentDao extends AbstractDao<VideoContent, String> {

    public static final String TABLENAME = "VIDEO_CONTENT";

    /**
     * Properties of entity VideoContent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property VideoId = new Property(1, String.class, "videoId", false, "VIDEO_ID");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property LineId = new Property(3, int.class, "lineId", false, "LINE_ID");
        public final static Property PicPath = new Property(4, String.class, "picPath", false, "PIC_PATH");
        public final static Property IconId = new Property(5, int.class, "iconId", false, "ICON_ID");
        public final static Property Text = new Property(6, String.class, "text", false, "TEXT");
    };


    public VideoContentDao(DaoConfig config) {
        super(config);
    }
    
    public VideoContentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_CONTENT\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"VIDEO_ID\" TEXT," + // 1: videoId
                "\"TIME\" TEXT," + // 2: time
                "\"LINE_ID\" INTEGER NOT NULL ," + // 3: lineId
                "\"PIC_PATH\" TEXT," + // 4: picPath
                "\"ICON_ID\" INTEGER NOT NULL ," + // 5: iconId
                "\"TEXT\" TEXT);"); // 6: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_CONTENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
        stmt.bindLong(4, entity.getLineId());
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(5, picPath);
        }
        stmt.bindLong(6, entity.getIconId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(7, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoContent entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String videoId = entity.getVideoId();
        if (videoId != null) {
            stmt.bindString(2, videoId);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(3, time);
        }
        stmt.bindLong(4, entity.getLineId());
 
        String picPath = entity.getPicPath();
        if (picPath != null) {
            stmt.bindString(5, picPath);
        }
        stmt.bindLong(6, entity.getIconId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(7, text);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideoContent readEntity(Cursor cursor, int offset) {
        VideoContent entity = new VideoContent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // videoId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // time
            cursor.getInt(offset + 3), // lineId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // picPath
            cursor.getInt(offset + 5), // iconId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoContent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVideoId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLineId(cursor.getInt(offset + 3));
        entity.setPicPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIconId(cursor.getInt(offset + 5));
        entity.setText(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoContent entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VideoContent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
