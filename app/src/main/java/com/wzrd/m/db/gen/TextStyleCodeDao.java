package com.wzrd.m.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.wzrd.m.been.TextStyleCode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEXT_STYLE_CODE".
*/
public class TextStyleCodeDao extends AbstractDao<TextStyleCode, String> {

    public static final String TABLENAME = "TEXT_STYLE_CODE";

    /**
     * Properties of entity TextStyleCode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TextColor = new Property(1, String.class, "textColor", false, "TEXT_COLOR");
        public final static Property TextBackground = new Property(2, int.class, "textBackground", false, "TEXT_BACKGROUND");
        public final static Property TextSize = new Property(3, int.class, "textSize", false, "TEXT_SIZE");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
    };


    public TextStyleCodeDao(DaoConfig config) {
        super(config);
    }
    
    public TextStyleCodeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEXT_STYLE_CODE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TEXT_COLOR\" TEXT," + // 1: textColor
                "\"TEXT_BACKGROUND\" INTEGER NOT NULL ," + // 2: textBackground
                "\"TEXT_SIZE\" INTEGER NOT NULL ," + // 3: textSize
                "\"TEXT\" TEXT);"); // 4: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEXT_STYLE_CODE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TextStyleCode entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String textColor = entity.getTextColor();
        if (textColor != null) {
            stmt.bindString(2, textColor);
        }
        stmt.bindLong(3, entity.getTextBackground());
        stmt.bindLong(4, entity.getTextSize());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TextStyleCode entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String textColor = entity.getTextColor();
        if (textColor != null) {
            stmt.bindString(2, textColor);
        }
        stmt.bindLong(3, entity.getTextBackground());
        stmt.bindLong(4, entity.getTextSize());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public TextStyleCode readEntity(Cursor cursor, int offset) {
        TextStyleCode entity = new TextStyleCode( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // textColor
            cursor.getInt(offset + 2), // textBackground
            cursor.getInt(offset + 3), // textSize
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TextStyleCode entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTextColor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTextBackground(cursor.getInt(offset + 2));
        entity.setTextSize(cursor.getInt(offset + 3));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(TextStyleCode entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(TextStyleCode entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
